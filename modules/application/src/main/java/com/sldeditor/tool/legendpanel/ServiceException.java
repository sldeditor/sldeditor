/*
 * SLD Editor - The Open Source Java SLD Editor
 *
 * Copyright (C) 2016, SCISYS UK Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.sldeditor.tool.legendpanel;

/* Copyright (c) 2001 - 2007 TOPP - www.openplans.org. All rights reserved.
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


/**
 *  Base class for exceptions generated by a service.
 *  <p>
 *  This class is based off the OGC idea of an exception, which contains
 *  a {@link #code}, and {@link #locator}. Futhermore optional fragments of
 *  {@link #exceptionText} may be associated with the exception.
 *  </p>
 *
 * @author Justin Deoliveira, The Open Planning Project, jdeolive@openplans.org
 *
 */
public class ServiceException extends RuntimeException {
    
    /** Serial UID. */
    private static final long serialVersionUID = 7254349181794561723L;
    
    /** The Constant NEW_LINE. */
    public static final String NEW_LINE = System.getProperty("line.separator");

    /**
     * Application specific code.
     */
    String code;

    /** Application specific locator. */
    String locator;

    /** List of text recording information about the exception. */
    List<String> exceptionText = new ArrayList<String>();

    /**
     * Constructs the exception from a message.
     *
     * @param message The message describing the exception.
     */
    public ServiceException(String message) {
        super(message);
    }

    /**
     * Constructs the exception from a message and causing exception.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     */
    public ServiceException(String message, Throwable cause) {
        super(message, cause);
    }

    /**
     * Constructs the exception from a message, causing exception, and code.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     */
    public ServiceException(String message, Throwable cause, String code) {
        this(message, cause);
        this.code = code;
    }

    /**
     * Constructs the exception from a message, causing exception, code, and
     * locator.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    public ServiceException(String message, Throwable cause, String code, String locator) {
        this(message, cause, code);
        this.locator = locator;
    }

    /**
     * Constructs the exception from a message, and code.
     *
     * @param message The message describing the exception.
     * @param code The application specific exception code for the exception.
     */
    public ServiceException(String message, String code) {
        super(message);
        this.code = code;
    }

    /**
     * Constructs the exception from a message,code, and
     * locator.
     *
     * @param message The message describing the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    public ServiceException(String message, String code, String locator) {
        this(message, code);
        this.locator = locator;
    }

    /**
     * Constructs the exception from a causing exception.
     *
     * @param cause The case of the exception.
     */
    public ServiceException(Throwable cause) {
        super(cause);
    }

    /**
     * Constructs the exception from causing exception, and code.
     *
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     */
    public ServiceException(Throwable cause, String code) {
        this(cause);
        this.code = code;
    }

    /**
     * Constructs the exception from a causing exception, code, and locator.
     *
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    public ServiceException(Throwable cause, String code, String locator) {
        this(cause, code);
        this.locator = locator;
    }

    /**
     * Gets the code.
     *
     * @return The application specifc code of the exception.
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the code for the exception.
     *
     * @param code The application specific code.
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Gets the locator.
     *
     * @return The application specific locator.
     */
    public String getLocator() {
        return locator;
    }

    /**
     * Sets the locator for the exception.
     *
     * @param locator the new locator
     */
    public void setLocator(String locator) {
        this.locator = locator;
    }

    /**
     * Returns the list of text fragments which provide additional information
     * about the exception.
     * <p>
     * Text fragments may be added directly to the list with:
     * <code>
     * exception.getExceptionTest().add( "text fragment" );
     * </code>
     * </p>
     * @return A list of String recording information about the exception.
     */
    public List<String> getExceptionText() {
        return exceptionText;
    }
    
    /**
     * To string.
     *
     * @return the string
     */
    @Override
    public String toString() {
        String msg = super.toString();
        if(exceptionText == null || exceptionText.size() == 0)
            return msg;
        
        StringBuilder sb = new StringBuilder(msg);
        for (Iterator<String> it = exceptionText.iterator(); it.hasNext();) {
            String extraMessage = (String) it.next();
            sb.append(NEW_LINE).append(extraMessage);
        }
        return sb.toString();
    }
}
